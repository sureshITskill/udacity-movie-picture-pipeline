# to raise the pull request 1
# creating new commit to raise pull requests
name: Udacity Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  frontendlint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name:  Set up Node.js with version 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        path: ~/.npm
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Install NPM Dependencies
      run: cd  starter/frontend && npm ci

    - name: Run npm lint
      run: cd starter/frontend && npm run lint
  frontendtest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Set up Node.js with 18 version
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json
    - name: Install NPM Dependencies
      run: cd starter/frontend && npm ci
  
    - name: Run the npm test
      run: cd starter/frontend && npm run test
  frontendbuild:
    needs: [frontendlint, frontendtest]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    
    - name: Set up Node.js with latest version
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon using AWS credentials
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
   #- name: Build the image and push to the ECR (refer terraform output) 
   #   env:
   #    IMAGE_TAG: latest
   #    REPO_NAME: frontend
   #   REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
   #  run: |
   #    cd starter/frontend
   #    docker build --build-arg=REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL/" --tag 777496403167.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
   #    docker push 777496403167.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
     

    - name: Configure Kubeconfig with cluster created(refer Terraform output)
      run: |
        cd starter/frontend/k8s
        aws eks update-kubeconfig --name cluster --region us-east-1
    - name: Display application URLs
      id: get_be_service_url
      run: |
          cd starter/frontend/k8s
          kubectl get svc -A
          BE_SERVICE_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "BE_SERVICE_URL=${BE_SERVICE_URL}"
          echo "::set-output name=be_service_url::${BE_SERVICE_URL}"
    - name: Build, tag, and push image to Amazon ECR
      working-directory: starter/frontend
      run: |
          echo "Using BE_SERVICE_URL=${{ steps.get_be_service_url.outputs.be_service_url }}"
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://${{ steps.get_be_service_url.outputs.be_service_url }} --tag=frontend:${GITHUB_SHA} .
          docker tag frontend:${GITHUB_SHA} 777496403167.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA}
          docker push 777496403167.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA}    

    - name: Deploy using ECR Docker Image to EKS
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
      run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=777496403167.dkr.ecr.us-east-1.amazonaws.com/frontend:${GITHUB_SHA}
          kustomize build | kubectl apply -f -
    - name: Display application URLs        
      run: |
          cd starter/frontend/k8s
          kubectl get svc -A
